const bcrypt = require("bcrypt");
const httpStatus = require("http-status");
const AuthController = require("./authController");

describe("AuthController", () => {
  let mockUsers;
  let authController;

  beforeEach(() => {
    mockUsers = {
      findOne: jest.fn(),
      create: jest.fn(),
    };
    authController = new AuthController(mockUsers);
  });

  describe("register", () => {
    it("should return 409 if user already exists", async () => {
      mockUsers.findOne.mockResolvedValueOnce({}); // Simulate existing user

      const req = {
        body: {
          username: "testuser",
          password: "password123",
          email: "test@example.com",
        },
      };
      const res = {
        status: jest.fn().mockReturnThis(),
        json: jest.fn(),
      };

      await authController.register(req, res);

      expect(res.status).toHaveBeenCalledWith(httpStatus.CONFLICT);
      expect(res.json).toHaveBeenCalledWith({
        message: "A user already registered with this email.",
      });
    });

    it("should register a new user and return user data", async () => {
      mockUsers.findOne.mockResolvedValueOnce(null); // Simulate no existing user
      mockUsers.create.mockResolvedValueOnce({
        username: "testuser",
        email: "test@example.com",
        password: "hashedPassword", // This would normally be hashed
      });

      const req = {
        body: {
          username: "testuser",
          password: "password123",
          email: "test@example.com",
        },
      };
      const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn(),
      };

      await authController.register(req, res);

      expect(mockUsers.create).toHaveBeenCalledWith({
        username: "testuser",
        password: expect.any(String), // You might want to check for specific password hashing
        email: "test@example.com",
      });
      expect(res.status).toHaveBeenCalledWith(httpStatus.OK);
      expect(res.send).toHaveBeenCalledWith({
        username: "testuser",
        email: "test@example.com",
        password: "hashedPassword", // This would normally be hashed
      });
    });
  });
});
